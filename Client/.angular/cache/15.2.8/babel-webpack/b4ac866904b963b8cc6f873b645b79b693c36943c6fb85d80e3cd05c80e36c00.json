{"ast":null,"code":"import { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nexport class JwtInterceptor {\n  constructor(_accountservoces) {\n    this._accountservoces = _accountservoces;\n  }\n  intercept(request, next) {\n    this._accountservoces.currentUser$.pipe(take(1)).subscribe({\n      next: User => {\n        if (User) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: 'Bearer ' + User.token\n            }\n          });\n        }\n      }\n    });\n    return next.handle(request);\n  }\n}\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n};\nJwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtInterceptor,\n  factory: JwtInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAAqBA,IAAI,QAAQ,MAAM;;;AAIvC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,gBAA+B;IAA/B,qBAAgB,GAAhBA,gBAAgB;EAAkB;EAEtDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAI,CAACH,gBAAgB,CAACI,YAAY,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS,CAAC;MACzDH,IAAI,EAACI,IAAI,IAAE;QACT,IAAGA,IAAI,EAAC;UACNL,OAAO,GAACA,OAAO,CAACM,KAAK,CAAC;YACpBC,UAAU,EAAC;cACTC,aAAa,EAAC,SAAS,GAACH,IAAI,CAACI;;WAEhC,CAAC;;MAEN;KACD,CAAC;IACF,OAAOR,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC;EAC7B;;AAjBWJ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;AAAA","names":["take","JwtInterceptor","constructor","_accountservoces","intercept","request","next","currentUser$","pipe","subscribe","User","clone","setHeaders","Authorization","token","handle","factory"],"sourceRoot":"","sources":["E:\\ShivamAgrahari\\Udemy\\Dating\\Client\\src\\app\\_interceptor\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, take } from 'rxjs';\nimport { AccountService } from '../_services/account.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private _accountservoces:AccountService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    this._accountservoces.currentUser$.pipe(take(1)).subscribe({\n      next:User=>{\n        if(User){\n          request=request.clone({\n            setHeaders:{\n              Authorization:'Bearer '+User.token\n            }\n          })\n        }\n      }\n    })\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}