{"ast":null,"code":"import { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"ngx-toastr\";\nexport class ErrorInterceptor {\n  constructor(_router, _toast) {\n    this._router = _router;\n    this._toast = _toast;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error) {\n        switch (error.status) {\n          case 400:\n            if (error.error.errors) {\n              const ModelStateError = [];\n              for (const key in error.error.errors) {\n                if (error.error.errors[key]) {\n                  ModelStateError.push(error.error.errors[key]);\n                }\n              }\n              throw ModelStateError.flat;\n            } else {\n              this._toast.error(error.error, error.status.toString());\n            }\n            break;\n          case 401:\n            this._toast.error(\"Unauthorised\", error.status.toString());\n            break;\n          case 404:\n            this._router.navigateByUrl('/not-found');\n            break;\n          case 500:\n            const navigationExtras = {\n              state: {\n                error: error.error\n              }\n            };\n            this._router.navigateByUrl('/server-error', navigationExtras);\n            break;\n          default:\n            this._toast.error('Something Unexpected went Wrong');\n            console.log(error);\n            break;\n        }\n      }\n      throw error;\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ToastrService));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;;;;AAK7C,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,OAAc,EAASC,MAAoB;IAA3C,YAAO,GAAPD,OAAO;IAAgB,WAAM,GAANC,MAAM;EAAiB;EAElEC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BT,UAAU,CAAEU,KAAuB,IAAG;MACpC,IAAGA,KAAK,EAAC;QACP,QAAOA,KAAK,CAACC,MAAM;UACjB,KAAK,GAAG;YACN,IAAGD,KAAK,CAACA,KAAK,CAACE,MAAM,EAAC;cACpB,MAAMC,eAAe,GAAC,EAAE;cACxB,KAAI,MAAMC,GAAG,IAAIJ,KAAK,CAACA,KAAK,CAACE,MAAM,EAAC;gBAClC,IAAGF,KAAK,CAACA,KAAK,CAACE,MAAM,CAACE,GAAG,CAAC,EAAC;kBACzBD,eAAe,CAACE,IAAI,CAACL,KAAK,CAACA,KAAK,CAACE,MAAM,CAACE,GAAG,CAAC,CAAC;;;cAGjD,MAAMD,eAAe,CAACG,IAAI;aAC3B,MACG;cACF,IAAI,CAACZ,MAAM,CAACM,KAAK,CAACA,KAAK,CAACA,KAAK,EAACA,KAAK,CAACC,MAAM,CAACM,QAAQ,EAAE,CAAC;;YAExD;UACA,KAAK,GAAG;YACN,IAAI,CAACb,MAAM,CAACM,KAAK,CAAC,cAAc,EAACA,KAAK,CAACC,MAAM,CAACM,QAAQ,EAAE,CAAC;YACzD;UACF,KAAK,GAAG;YACN,IAAI,CAACd,OAAO,CAACe,aAAa,CAAC,YAAY,CAAC;YACxC;UACF,KAAK,GAAG;YACN,MAAMC,gBAAgB,GAAkB;cAACC,KAAK,EAAC;gBAACV,KAAK,EAACA,KAAK,CAACA;cAAK;YAAC,CAAC;YACnE,IAAI,CAACP,OAAO,CAACe,aAAa,CAAC,eAAe,EAACC,gBAAgB,CAAC;YAC5D;UACF;YACE,IAAI,CAACf,MAAM,CAACM,KAAK,CAAC,iCAAiC,CAAC;YACpDW,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;YAClB;QAAM;;MAGd,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;;AA1CWT,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAsB,SAAhBtB,gBAAgB;AAAA","names":["catchError","ErrorInterceptor","constructor","_router","_toast","intercept","request","next","handle","pipe","error","status","errors","ModelStateError","key","push","flat","toString","navigateByUrl","navigationExtras","state","console","log","factory"],"sourceRoot":"","sources":["E:\\ShivamAgrahari\\Udemy\\Dating\\Client\\src\\app\\_interceptor\\error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError } from 'rxjs';\nimport { NavigationExtras, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private _router:Router,private _toast:ToastrService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error:HttpErrorResponse)=>{\n        if(error){\n          switch(error.status){\n            case 400:\n              if(error.error.errors){\n                const ModelStateError=[];\n                for(const key in error.error.errors){\n                  if(error.error.errors[key]){\n                    ModelStateError.push(error.error.errors[key])\n                  }\n                }\n                throw ModelStateError.flat;\n              }\n              else{\n                this._toast.error(error.error,error.status.toString())\n              }\n              break;\n              case 401:\n                this._toast.error(\"Unauthorised\",error.status.toString())\n                break;\n              case 404:\n                this._router.navigateByUrl('/not-found')\n                break;\n              case 500:\n                const navigationExtras:NavigationExtras={state:{error:error.error}}\n                this._router.navigateByUrl('/server-error',navigationExtras)\n                break;\n              default:\n                this._toast.error('Something Unexpected went Wrong')\n                console.log(error)\n                break;\n          }\n        }\n        throw error;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}